import XCTest
@testable import SwiftCartesian
%{
from environs import Env
env = Env()
env.read_env()
max_arguments = int(env("MAX_ARGUMENTS"))
}%

final class SwiftCartesianTests: XCTestCase {
    func testMultiply2() {
        let array2 = Self.values * Self.values
        XCTAssertEqual(array2[0].0, true)
        XCTAssertEqual(array2[0].1, true)
        XCTAssertEqual(array2[1].0, true)
        XCTAssertEqual(array2[1].1, false)
        XCTAssertEqual(array2[2].0, false)
        XCTAssertEqual(array2[2].1, true)
        XCTAssertEqual(array2[3].0, false)
        XCTAssertEqual(array2[3].1, false)
    }
    
    func testMultiply3() {
        let array3 = Self.values * Self.values * Self.values
        XCTAssertEqual(array3[0].0.0, true)
        XCTAssertEqual(array3[0].0.1, true)
        XCTAssertEqual(array3[0].1, true)
        XCTAssertEqual(array3[1].0.0, true)
        XCTAssertEqual(array3[1].0.1, true)
        XCTAssertEqual(array3[1].1, false)
        
        XCTAssertEqual(array3[2].0.0, true)
        XCTAssertEqual(array3[2].0.1, false)
        XCTAssertEqual(array3[2].1, true)
        XCTAssertEqual(array3[3].0.0, true)
        XCTAssertEqual(array3[3].0.1, false)
        XCTAssertEqual(array3[3].1, false)
        
        XCTAssertEqual(array3[4].0.0, false)
        XCTAssertEqual(array3[4].0.1, true)
        XCTAssertEqual(array3[4].1, true)
        XCTAssertEqual(array3[5].0.0, false)
        XCTAssertEqual(array3[5].0.1, true)
        XCTAssertEqual(array3[5].1, false)
        
        XCTAssertEqual(array3[6].0.0, false)
        XCTAssertEqual(array3[6].0.1, false)
        XCTAssertEqual(array3[6].1, true)
        XCTAssertEqual(array3[7].0.0, false)
        XCTAssertEqual(array3[7].0.1, false)
        XCTAssertEqual(array3[7].1, false)
    }
% for i in range(2, max_arguments + 1):
    func testCartesian${i}() {
        struct Data: Hashable {
            % for j in range(0, i):
            let x${j}: Bool
            %end
        }
        
        let product = cartesian(${", ".join(map(lambda x: "Self.values", range(0, i)))})
        let data = Set(product.map(Data.init))
        XCTAssertEqual(product.count, ${2 ** i})
        XCTAssertEqual(data.count, ${2 ** i})
    }
%end
}

extension SwiftCartesianTests {
    static var allTests = [
        % for i in range(2, max_arguments + 1):
        ("testCartesian${i}", testCartesian${i}),
        %end
    ]
}

extension SwiftCartesianTests {
    static let values = [true, false]
}
